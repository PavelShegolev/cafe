<?php	class Model_Place extends Model implements Iinfo{		public function __construct(){			parent::connect();		}    private $prefix;    private $path_image;        private function Indexation($description){      //--------внесение данных в таблицу поиска-------//      $id_place= $this->GetLastId();      $indx= new Indexation($id_place['id'],1,$description);      $result= $indx->create_index();      return $result;    }        public function get_type_access(){			session_start();			return $_SESSION['type_a'];		}        private function DeleteLastPlace(){      $query= 'delete from places where id='.$this->GetLastId();      parent::set_query($query);    }        private function DeleteLastImage(){      unlink($path_image);    }    		private function display_default_image(){			$handle= fopen('images/image_not_found.jpg', 'r');			header('Content-type: image/jpeg');			echo fread($handle, filesize('images/image_not_found.jpg'));		}        private function translate($str){      $str= strtr($str,'абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФЦЧШЩЪЫЬЭЮЯ',      'abvgdeejziiklmnoprstyfxhwwwbwbeuaABVGDEEJZIIKLMNOPRSTYFXHWWWBWBEUA');      $str= str_replace(' ','_',$str);      return $str;    }        private function get_path_image($name_hash){      $sub1= substr($name_hash,0,2);      $sub2= substr($name_hash,2,2);      return '/'.$sub1.'/'.$sub2.'/';    }        private function get_type_image(){      return pathinfo($_FILES['image_file']['name'],PATHINFO_EXTENSION);    }        private function get_full_hash_name_image(){//переделать название      $type= $this->get_type_image();      $name_hash= md5($this->prefix . $_FILES['image_file']['name']);      return $name_hash .'.'.$type;    }        private function create_dir($sub1, $sub2){      $result= true;      $dir= './upload/';      if(!is_dir($dir . $sub1))        if(!mkdir($dir . $sub1)){          Log_error::write("can't create directory:".$dir . $sub1);          return false;        }      if(!is_dir($dir . $sub1 .'/'. $sub2))        if(!mkdir($dir . $sub1 .'/'. $sub2)){          Log_error::write("can't create directory:".$dir . $sub1 .'/'. $sub2);          return false;        }      return $result;    }        private function save_image(){      $result= true;      $this->prefix= time();      $type= $this->get_type_image();//запоминаем тип файла      $name_hash= md5($this->prefix . $_FILES['image_file']['name']);      $sub1= substr($name_hash,0,2);      $sub2= substr($name_hash,2,2);      $path= './upload/'. $sub1 .'/'. $sub2 .'/'.$name_hash.'.'.$type;      $result= $this->create_dir($sub1, $sub2);      if(!$result){        CollectorMessage::set_message(E_CREATE_PLACE, error);      }else{        $result= copy($_FILES['image_file']['tmp_name'],$path);        if(!$result){          Log_error::write("can't copy file:".$path);          CollectorMessage::set_message(E_CREATE_PLACE, error);        }else{          $this->path_image= $path;        }      }      return $result;    }        private function check($str){      return parent::$link->real_escape_string($str);    }       public function get_data_place($name_place){      if(empty($name_place)){        MessageCollector::set_message('Такого заведения не существует', warning);        return false;      }			$name_place= $this->check($name_place);			$query= "select * from places where places.name_no_space='".$name_place."'";			$result= parent::get_row($query);      if($result === false){        MessageCollector::set_message('Произошла ошибка.', error);        return false;      }      if($result === null){        MessageCollector::set_message('Такого заведения не существует', warning);        return false;      }else{				session_start();				$_SESSION['name_place']= $name_place;				$_SESSION['id_place']= $result['id'];			}			return $result;		}        public function get_data_catalog(){			$query='select name,type_,name_no_space from places';			$result= parent::get_rows($query);			return  $result;		}        public function GetLastId(){      $query= 'select id from places order by id desc limit 1';      return parent::get_row($query);    }        private function search_equal_name($name){      $query= "select id from places where name='".$name."'";      return parent::get_row($query);    }        private function check_fields(){      $result= true;      if(empty($_POST['description'])){        MessageCollector::set_message('Поле описание не должен быть пустым.', warning);        $result= false;      }      if(empty($_POST['address'])){        MessageCollector::set_message('Поле адрес  не должен быть пустым.', warning);        $result= false;      }      if(empty($_POST['phone'])){        MessageCollector::set_message('Поле номер телефона не должен быть пустым.', warning);        $result= false;      }            if(empty($_POST['time_job'])){        MessageCollector::set_message('Поле время работы телефона не должен быть пустым.', warning);        $result= false;      }            if(empty($_POST['type_place'])){        MessageCollector::set_message('Поле тип заведения должен быть выбран.', warning);        $result= false;      }            if(empty($_FILES['image_file']['tmp_name'])){        MessageCollector::set_message('Фотография заведения должна быть выбрана.', warning);        $result= false;      }            if(empty($_POST['name'])){        MessageCollector::set_message('Поле имя заведения не должен быть пустым.', warning);        $result= false;      }            return $result;    }        public function AddPlace(){      if(!$this->check_fields()){        return false;      }      $name_place= $this->check($_POST['name']);      if($this->search_equal_name($name_place) != null){        MessageCollector::set_message('Заведение с таким именем уже существует.', warning);        return false;      }      $description= $this->check($_POST['description']);      $address= $this->check($_POST['address']);      $phone= $this->check($_POST['phone']);      $time_job= $this->check($_POST['time_job']);      $type_place= $this->check($_POST['type_place']);      $translate_name_place= $this->translate($name_place);      $hash_image= $this->get_full_hash_name_image();      $path_image= $this->get_path_image($hash_image);      $query="insert into places(path_image,hash_image,description,name,address,phone,time_job,type_,name_no_space)values('".$path_image."','".	$hash_image."','".$description."','".$name_place."','".$address."','".$phone."','".$time_job."','".$type_place."','".$translate_name_place."')";      $result= parent::set_query($query);      if(!$result){        MessageCollector::set_message(E_CREATE_PLACE, error);        return false;      }      $result= $this->save_image();      if(!$result){        MessageCollector::set_message(E_CREATE_PLACE, error);        $this->DeleteLastPlace();        return false;      }      if(!$this->Indexation($description)){        MessageCollector::set_message(E_CREATE_PLACE, error);        $this->DeleteLastPlace();        $this->DeleteLastImage();        return false;      }      return true;    }    		public function Get_Data_onid($ids){			$query= "select name_no_space, name, SUBSTRING(description,1,250) as description from places where id in (".$ids.")";			$data= parent::get_rows($query);			$result= $this->Processing_Data($data);			return $result;		}				public function Processing_Data($data){			foreach($data as $row){			$temp_arr['url']= '/place/places/'.$row['name_no_space'];			$temp_arr['name']= $row['name'];			$temp_arr['description']= $row['description'];      $temp_arr['source']= 'Place';			$result[]= $temp_arr;			}			return $result;		}				public function get_image($name_image){      $path_image= "../upload".$_GET['path_image'];			$type_image= substr($name_image,strpos($name_image,'.'),strlen($name_image) - strpos($name_image,'.'));			$handle= fopen($path_image, 'r');			if(!$handle){        Log_error::write("can't open image: ".$path_image);        $this->display_default_image();      }else{      	switch($type_image){          case (".jpg" or ".jpeg"):{              header('Content-type: image/jpeg');              echo fread($handle, filesize($path_image));              break;            }          case '.png':{              header('Content-type: image/png');              echo fread($handle, filesize($path_image));              break;            }          case '.gif':{              header('Content-type: image/gif');              echo fread($handle, filesize($path_image));              break;            }          default:$this->display_default_image();        }      }		}		public function get_data_comments($id_place){			$query= 'select * from comments as c inner join users as u on (c.id_user = u.id_users) where c.id_info='.$id_place;			$result= parent::get_rows($query);      if($result === false){;        MessageCollector::set_message('Произошла ошибка вывода коментариев.',error);      }			return $result;		}						public function add_comment(){			$date= date('Y-m-d');			$time= date('h:m:s');			$text_comment= $this->check($_POST['text_comment']);			session_start();			$id_users= $_SESSION['id_users'];			$id_place= $_SESSION['id_place'];			parent::set_query("insert into Comments (info,id_user,id_info,date_,time_) values('".$text_comment."',".$id_users.",".$id_place.",'".$date."','".$time."')");		}			}?>